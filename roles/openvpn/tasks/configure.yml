# task: configure

- name: Update repos and install openvpn
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
       - openvpn
       - easy-rsa
       - openvpn-auth-ldap

- name: Copy easy-rsa template
  shell: make-cadir /home/{{ ansible_ssh_user }}//openvpn-ca
  args:
    executable: /bin/bash
    creates: /home/{{ ansible_ssh_user }}//openvpn-ca

- name: copy over vars
  template: src=vars.j2 dest=/home/{{ ansible_ssh_user }}//openvpn-ca/vars mode=0777
            owner={{ ansible_user }}

- name: Setup bash script for ca building
  template: src=build-ca.j2 dest=/home/{{ ansible_ssh_user }}//openvpn-ca/run_ca_building.sh mode=0755
            owner={{ ansible_user }}

- name: Build vars, cleanup and build ca
  expect:
    command: bash /home/{{ ansible_ssh_user }}/openvpn-ca/run_ca_building.sh
    chdir: /home/{{ ansible_ssh_user }}/openvpn-ca/
    responses:
      Country Name:
        - "{{ org_country }}"
      State or Province Name:
        - "{{ org_province }}"
      Locality Name:
        - "{{ org_location }}" 
      Organization Name:
        - "{{ org_name }}"
      Organizational Unit Name:
        - "Company"
      Common Name:
        - "Prominent Edge CA"
      Name \[server\]:
        - "Server"
      Email Address:
        - "dummyemail@acme.com"

- name: Setup bash script to generate server cert and key pair
  template: src=build-cert.j2 dest=/home/{{ ansible_ssh_user }}//openvpn-ca/build_cert_and_keys.sh mode=0755
            owner={{ ansible_user }}

- name: Generate server cert and keypair
  expect:
    command: bash /home/{{ ansible_ssh_user }}/openvpn-ca/build_cert_and_keys.sh
    chdir: /home/{{ ansible_ssh_user }}/openvpn-ca/
    responses:
      Country Name:
        - "{{ org_country }}"
      State or Province Name:
        - "{{ org_province }}"
      Locality Name:
        - "{{ org_location }}" 
      Organization Name:
        - "{{ org_name }}"
      Organizational Unit Name:
        - "Company"
      Common Name:
        - "Prominent Edge Cert"
      Name \[server\]:
        - "Server"
      Email Address:
        - "dummyemail@acme.com"
      A challenge password:
        - ""
      Sign the certificate:
        - "y"
      requests certified, commit:
        - "y"
      An optional company name:
        - ""


- name: Generate Diffie-Hellman keys
  template: src=diffie-hellman.j2 dest=/home/{{ ansible_ssh_user }}//openvpn-ca/diffie_hellman_keys.sh mode=0755
            owner={{ ansible_user }}

- name: Generate Diffie-Hellman Keys
  expect:
    command: bash /home/{{ ansible_ssh_user }}/openvpn-ca/diffie_hellman_keys.sh
    chdir: /home/{{ ansible_ssh_user }}/openvpn-ca/
    timeout: 180
    responses:
      None:
        - ""

- name: Generate Client cert and KP
  copy: src=generate_cert_and_kp.sh dest=/home/{{ ansible_ssh_user }}//openvpn-ca/generate_cert_and_kp.sh mode=0755
            owner={{ ansible_user }}

- name: Generate Client cert and KP
  expect:
    command: bash /home/{{ ansible_ssh_user }}/openvpn-ca/generate_cert_and_kp.sh
    chdir: /home/{{ ansible_ssh_user }}/openvpn-ca/
    responses:
      Country Name:
        - "{{ org_country }}"
      State or Province Name:
        - "{{ org_province }}"
      Locality Name:
        - "{{ org_location }}" 
      Organization Name:
        - "{{ org_name }}"
      Organizational Unit Name:
        - "Company"
      Common Name:
        - "Prominent Edge CA"
      Name \[server\]:
        - "Server"
      Email Address:
        - "dummyemail@acme.com"
      A challenge password:
        - ""
      Sign the certificate\? \[y\/n\]:
        - "y"
      requests certified, commit:
        - "y"
      An optional company name:
        - ""

- name: Copy over server configuration
  copy: src=server.conf dest=/etc/openvpn/server.conf mode=0644 owner=root group=root

- name: Allow server to route traffic
  copy: src=sysctl.conf dest=/etc/sysctl.conf mode=0644 owner=root group=root

- name: Make it so
  shell: sysctl -p
  become: yes

- name: Setup ufw firewall rules
  copy: src=before.rules dest=/etc/ufw/before.rules mode=0644 owner=root group=root

- name: Create ufw defaults to allow allow forwarded packets
  copy: src=ufw.defaults dest=/etc/default/ufw mode=0644 owner=root group=root

- name: Open ports for ufw as well as ssh and enable
  copy: src=allow_enable_ufw.sh dest=/tmp/allow_enable_ufw.sh mode=0755 owner=root group=root

- name: Run shell script to allow and enable ufw access
  shell: /tmp/allow_enable_ufw.sh

- name: Start openvpn server
  systemd: state=started name=openvpn@server

- name: Start openvpn server
  systemd:
    name: openvpn@server
    enabled: yes
    masked: no

- name: Create client config directory
  file:
    path: /home/{{ ansible_ssh_user }}/client-configs/files
    state: directory
    mode: 0700

- name: Make openvpn auth dir
  file:
    path: /etc/openvpn/auth/
    state: directory
    mode: 0644

- name: Copy over auth ldap config
  template: src=auth-ldap.conf.j2 dest=/etc/openvpn/auth/auth-ldap.conf mode=0644
            owner={{ ansible_user }}

- name: get public IP
  shell: curl http://169.254.169.254/latest/meta-data/public-ipv4
  register: public_ip

- name: Copy over base configuration
  template: src=base.conf.j2 dest=/home/{{ ansible_ssh_user }}/client-configs/base.conf mode=0755
            owner={{ ansible_user }}

- name: Copy Over configuration script
  template: src=make_config.sh.j2 dest=/home/{{ ansible_ssh_user }}/client-configs/make_config.sh  mode=0755 owner={{ ansible_ssh_user }}

- name: Ensure ownership for downstream profile creations
  file:
    recurse: yes
    path: /home/{{ ansible_ssh_user }}/client-configs
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0755

- name: Ensure ownership for downstream profile creations
  file:
    recurse: yes
    path: /home/{{ ansible_ssh_user }}/openvpn-ca
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0755

- name: Create client configs
  shell: /home/{{ ansible_ssh_user }}/client-configs/make_config.sh global
  become: yes
  args:
    chdir: /home/{{ ansible_ssh_user }}/client-configs/

- name: Copy configs to S3
  s3:
    bucket: "{{ s3_bucket }}"
    object: /configs/{{ project_vpn }}-global.ovpn
    src: /home/{{ ansible_ssh_user }}/client-configs/files/global.ovpn
    mode: put
  ignore_errors: yes

- name: Copy over sshd config
  file:
    path: /etc/ssh/sshd_config
    state: file
    mode: 0644

- name: Restart openvpn
  service:
    name: openvpn
    state: restarted
  
